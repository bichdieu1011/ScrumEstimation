@using ScrumEstimationWeb.Shared
@using System.Text
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@inject IJSRuntime JSRuntime

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ScrumEstimationWeb</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <ul class="nav-submenu collapse list-unstyled" id="userSubMenu">
                @if (allRoom != null)
                {
                    @foreach (var item in allRoom)
                    {
                        <li class="nav-subitem">
                            <NavLink href=@{$"room/{item.Id}"}
                             style="cursor:pointer;display: inline-block;max-width: 190px;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;">
                                <span aria-hidden="true"></span> @item.Name
                            </NavLink>
                        </li>
                    }
                }
            </ul>
        </div>
        @*<div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
            <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
            </div>*@
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    RoomModel[] allRoom = new RoomModel[] { };

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var romIds = await JSRuntime.InvokeAsync<string[]>("getALlLocalStorage");

        var strContent = JsonConvert.SerializeObject(romIds);
        var content = new StringContent(strContent, Encoding.UTF8, "application/json");
        var response = await Http.PostAsync("Scrum/allRooms", content);
        allRoom = await response.Content.ReadFromJsonAsync<RoomModel[]>();
        base.OnInitializedAsync();
    }
}
